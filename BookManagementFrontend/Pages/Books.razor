@page "/books"
@using MudBlazor
@inject BookService BookService

<MudContainer>
    <MudCard>
        <MudCardContent>
            <MudText Typo="Typo.h4">Book Management</MudText>

            <!-- Search Bar -->
            <MudTextField @bind-Value="searchQuery" Placeholder="Search for a book"
                          Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search"
                          Immediate="true" OnInput="UpdateSearch" />

            <MudButton OnClick="ClearSearch" Color="Color.Secondary" Class="ml-2">
                Cancel <MudIcon Icon="Icons.Material.Filled.Clear"/>
            </MudButton>

            <!-- Add Book Button -->
            <MudButton OnClick="() => OpenDialog(null)" Color="Color.Success" Class="ml-2">
                Add Book <MudIcon Icon="Icons.Material.Filled.Add"/>
            </MudButton>
        </MudCardContent>
    </MudCard>

    <!-- Book List Table -->
    <MudTable Items="filteredBooks" Hover="true">
        <HeaderContent>
            <MudTh>S.No</MudTh>
            <MudTh>Title</MudTh>
            <MudTh>Author</MudTh>
            <MudTh>Year</MudTh>
            <MudTh>Actions</MudTh>
        </HeaderContent>
        <RowTemplate Context="book">
            <MudTd>@(filteredBooks.IndexOf(book) + 1)</MudTd>
            <MudTd>@book.Title</MudTd>
            <MudTd>@book.Author</MudTd>
            <MudTd>@book.Year</MudTd>
            <MudTd>
                <MudButton Color="Color.Warning" OnClick="() => OpenDialog(book)">
                    <MudIcon Icon="Icons.Material.Filled.Edit"/> Edit
                </MudButton>
                <MudButton Color="Color.Error" OnClick="() => DeleteBook(book.Id)" Class="ml-2">
                    <MudIcon Icon="Icons.Material.Filled.Delete"/> Delete
                </MudButton>
            </MudTd>
        </RowTemplate>
    </MudTable>
</MudContainer>

<!-- Add/Edit Book Dialog -->
@if (editingBook != null)
{
    <MudOverlay Visible="isDialogOpen" Darken="true" ZIndex="10">
        <MudContainer MaxWidth="MaxWidth.Small" Class="d-flex align-center justify-center" Style="height: 100vh;">
            <MudCard Style="width: 100%; max-width: 500px;" @onclick:stopPropagation="true">
                <MudCardHeader>
                    <MudText Typo="Typo.h6">@(editingBook.Id == 0 ? "Add New Book" : "Edit Book")</MudText>
                </MudCardHeader>
                <MudCardContent>
                    <MudTextField @bind-Value="editingBook.Title" Label="Title" Required="true" Immediate="true" />
                    <MudTextField @bind-Value="editingBook.Author" Label="Author" Required="true" Immediate="true" />
                    <MudTextField @bind-Value="editingBook.Year" Label="Year" Required="true"
                                  Type="MudTextFieldType.Number" Immediate="true" />
                </MudCardContent>
                <MudCardActions>
                    <MudButton OnClick="SaveBook" Color="Color.Primary">Save</MudButton>
                    <MudButton OnClick="CloseDialog" Color="Color.Secondary">Cancel</MudButton>
                </MudCardActions>
            </MudCard>
        </MudContainer>
    </MudOverlay>
}

@code {
    private List<BookModel> books = new();
    private List<BookModel> filteredBooks => string.IsNullOrWhiteSpace(searchQuery)
        ? books
        : books.Where(b => b.Title.Contains(searchQuery, StringComparison.OrdinalIgnoreCase) ||
                           b.Author.Contains(searchQuery, StringComparison.OrdinalIgnoreCase) ||
                           b.Year.ToString().Contains(searchQuery)).ToList();
    private string searchQuery = "";
    private bool isDialogOpen = false;
    private BookModel? editingBook;

    protected override async Task OnInitializedAsync()
    {
        books = await BookService.GetBooksAsync();
    }

    private async Task SaveBook()
    {
        if (editingBook != null)
        {
            if (editingBook.Id == 0)
                await BookService.AddBookAsync(editingBook);
            else
                await BookService.UpdateBookAsync(editingBook);

            books = await BookService.GetBooksAsync();
            CloseDialog();
        }
    }

    private async Task DeleteBook(int id)
    {
        await BookService.DeleteBookAsync(id);
        books = await BookService.GetBooksAsync();
    }

    private void OpenDialog(BookModel? book)
    {
        editingBook = book != null ? 
            new BookModel { Id = book.Id, Title = book.Title, Author = book.Author, Year = book.Year } 
            : new BookModel();
        isDialogOpen = true;
    }

    private void CloseDialog()
    {
        isDialogOpen = false;
    }

    private void ClearSearch()
    {
        searchQuery = "";
    }

    private void UpdateSearch(string value)
    {
        searchQuery = value;
        StateHasChanged(); // Forces UI update
    }

}